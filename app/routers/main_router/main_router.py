from core.configuration.settings import app_settings

import re

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession


from keyboards.main_keyboard.main_keyboard import welcome_button
from keyboards.receipt_keyboard.receipt_keyboard import receipt_button
from states.wallet_state.wallet_state import WalletReg

from requests.users_requests.users import UsersRequests
from requests.receipts_requests.receipts import ReceiptsRequests



router = Router()

bot = Bot(token=app_settings.TOKEN)




@router.message(CommandStart())
async def cmd_start(
    message: Message,
    session: AsyncSession
) -> str:

    user_now = UsersRequests(
        message.from_user.id,
        message.from_user.username,
        session
    )

    new_user = await user_now.set_user()


    id_url = message.text.split()
    if len(id_url) > 1:

        deal_id = id_url[1]
        
        new_receipt = ReceiptsRequests(
            id_receipt=deal_id,
            buyer=message.from_user.id,
            session=session
        )

        updt_buyer_info = await new_receipt.update_buyer_info()

        this_receipt = await new_receipt.get_receipt()

        if this_receipt:
            
            if this_receipt.user.id == new_user.id:
                await bot.delete_message(
                    chat_id=message.chat.id, 
                    message_id=message.message_id
                    )
                return await message.answer('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–≤–æ–µ–π –∂–µ —Å–¥–µ–ª–∫–µ.')

        if this_receipt and this_receipt.user.card == 'RU':
            
            await bot.send_message(chat_id=this_receipt.user.telegram_id, text=f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ #{this_receipt.id_receipt}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {this_receipt.user.successful_transaction}
‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≤–µ–ª–∏ –¥–∏–∞–ª–æ–≥ —Ä–∞–Ω–µ–µ!

–ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!""")

            return await message.answer(f"""
üí≥ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ</b> #{this_receipt.id_receipt}

üë§ <b>–í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å</b> –≤ —Å–¥–µ–ª–∫–µ.
üìå –ü—Ä–æ–¥–∞–≤–µ—Ü: <b>@{this_receipt.user.username}</b> ({this_receipt.user.telegram_id})
‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {this_receipt.user.successful_transaction}

‚Ä¢ –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {this_receipt.tovar}

üè¶ <b>–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>
UQDIMoxS4xmLihI9AxhG28QpAxupZQzzaHwAYBzrdvc2b2ah

üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b>
üá∑üá∫ {this_receipt.price} RUB

üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É(–º–µ–º–æ):</b> <code>{this_receipt.id_receipt}</code>

‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(–º–µ–º–æ) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!</b>

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
""", parse_mode="HTML")

        if this_receipt and this_receipt.user.card == 'TON':
            
            await bot.send_message(chat_id=this_receipt.user.telegram_id, text=f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ #{this_receipt.id_receipt}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {this_receipt.user.successful_transaction}
‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≤–µ–ª–∏ –¥–∏–∞–ª–æ–≥ —Ä–∞–Ω–µ–µ!

–ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!""")

            return await message.answer(f"""
üí≥ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ</b> #{this_receipt.id_receipt}

üë§ <b>–í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å</b> –≤ —Å–¥–µ–ª–∫–µ.
üìå –ü—Ä–æ–¥–∞–≤–µ—Ü: <b>@{this_receipt.user.username}</b> ({this_receipt.user.telegram_id})
‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {this_receipt.user.successful_transaction}

‚Ä¢ –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {this_receipt.tovar}

üè¶ <b>–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>
UQDIMoxS4xmLihI9AxhG28QpAxupZQzzaHwAYBzrdvc2b2ah

üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b>
üíé {this_receipt.price} TON

üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É(–º–µ–º–æ):</b> <code>{this_receipt.id_receipt}</code>

‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(–º–µ–º–æ) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!</b>

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
""", parse_mode="HTML")

    return await message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
caption="""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç</b>

üíº <b>–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!</b>
–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.

üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏

üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>
–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ‚Äî https://telegra.ph/OTC-06-29

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:""",
reply_markup=welcome_button.inlkey,
parse_mode='HTML'
)
        



@router.callback_query(F.data == "wallet")
async def cmd_wallet(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
) -> str:
    
    await callback.answer('wallet')

    user = UsersRequests(
        callback.from_user.id,
        callback.from_user.username,
        session
    )

    this_user = await user.set_user()


    if this_user.card == '' or this_user.wallet is None:

        await state.set_state(WalletReg.card)

        await bot.delete_message(
            chat_id=callback.message.chat.id, 
            message_id=callback.message.message_id
            )
        
        return await callback.message.answer('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É.', reply_markup=welcome_button.inlkey_card)
        
    print('1')
    await state.set_state(WalletReg.address_wallet)
    
    return await callback.message.answer(f"""
üíº <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫:</b> {this_user.wallet}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.""",
reply_markup=welcome_button.wallet_inlkey,
parse_mode='HTML'
)






@router.callback_query(WalletReg.card)
async def cmd_wallet_reg_card(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
) -> str:
    
    await callback.answer()

    user = UsersRequests(
        callback.from_user.id,
        callback.from_user.username,
        session
    )

    user_wallet = await user.get_user_wallet()

    if callback.data == 'back':

        await state.clear()

        await bot.delete_message(
                chat_id=callback.message.chat.id, 
                message_id=callback.message.message_id
                )
        
        return await callback.message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
caption="""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç</b>

üíº <b>–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!</b>
–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.

üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏

üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>
–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ‚Äî https://telegra.ph/OTC-06-29

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:""",

reply_markup=welcome_button.inlkey,
parse_mode='HTML')


    if user_wallet is None:

        if callback.data == 'RUS':

            await state.update_data(
                card = 'RU'
            )

            data = await state.get_data()

            new_card = await user.set_user_card(data['card'])

            await state.set_state(WalletReg.address_wallet)
            await bot.delete_message(
                chat_id=callback.message.chat.id, 
                message_id=callback.message.message_id
                )

            return await callback.message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
caption="""
üîë <b>–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à RU-–∫–æ—à–µ–ª–µ–∫:</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.
""",
reply_markup=welcome_button.wallet_inlkey,
parse_mode='HTML'
)

    if user_wallet is None:

        if callback.data == 'TONS':

            await state.update_data(
                card = 'TON'
            )

            data = await state.get_data()

            new_card = await user.set_user_card(data['card'])

            await state.set_state(WalletReg.address_wallet)
            await bot.delete_message(
                chat_id=callback.message.chat.id, 
                message_id=callback.message.message_id
                )

            return await callback.message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
caption="""
üîë <b>–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à TON-–∫–æ—à–µ–ª–µ–∫:</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.
""",
reply_markup=welcome_button.wallet_inlkey,
parse_mode='HTML'
)
    
    await state.set_state(WalletReg.address_wallet)

    await bot.delete_message(
            chat_id=callback.message.chat.id, 
            message_id=callback.message.message_id
            )
    
    return await callback.message.answer(f"""
üíº <b>–í–∞—à —Ç–µ–∫—É—â–∏–π {user.card}-–∫–æ—à–µ–ª–µ–∫:</b> {user_wallet}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.""",
reply_markup=welcome_button.wallet_inlkey,
parse_mode='HTML'
)
    



@router.message(WalletReg.address_wallet)
async def set_new_wallet_address(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):

    user = UsersRequests(
        message.from_user.id, 
        message.from_user.username, 
        session
        )

    new_user = await user.set_user()

    if re.fullmatch(r'[A-Za-z0-9]+', message.text) and len(message.text) == 48 or re.fullmatch(r'[0-9]+', message.text) and len(message.text) == 16:

        await state.update_data(
            address_wallet = message.text
            )

        data = await state.get_data()

        new_wallet = await user.set_user_wallet(data['address_wallet'])

        await state.clear()

        await bot.delete_message(
            chat_id=message.chat.id, 
            message_id=message.message_id-1
            )
        await message.delete()
        await message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ', caption=f"""
üíº <b>–í–∞—à —Ç–µ–∫—É—â–∏–π {new_user.card}-–∫–æ—à–µ–ª–µ–∫:</b> {new_wallet}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.""",
reply_markup=welcome_button.wallet_inlkey,
parse_mode='HTML'
)

        await state.set_state(WalletReg.address_wallet)
        return

    return await message.answer('‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')




@router.callback_query(F.data=='back')
async def cmd_back(
    callback: CallbackQuery,
    state: FSMContext    
) -> str:
    await callback.answer('back')
    await bot.delete_message(
            chat_id=callback.message.chat.id, 
            message_id=callback.message.message_id
            )
    return await callback.message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
caption="""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç</b>

üíº <b>–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!</b>
–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.

üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏

üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>
–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ‚Äî https://telegra.ph/OTC-06-29

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:""",

reply_markup=welcome_button.inlkey,
parse_mode='HTML')

