from core.configuration.settings import app_settings

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from states.receipt_state.receipt_state import ReceiptReg
from keyboards.main_keyboard.main_keyboard import welcome_button
from keyboards.receipt_keyboard.receipt_keyboard import receipt_button
from core.security.generation import uniq_generation
from requests.users_requests.users import UsersRequests
from requests.receipts_requests.receipts import ReceiptsRequests


router = Router()

bot = Bot(token=app_settings.TOKEN)





@router.callback_query(F.data == 'deal')
async def cmd_create_receipt(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
) -> str:

    await callback.answer('deal') 


    user = UsersRequests(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        session=session
    )

    user_now = await user.get_user()

    if user_now.wallet and user_now.card == 'RU':

        await state.set_state(ReceiptReg.price)

        await bot.delete_message(
            chat_id=callback.message.chat.id, 
            message_id=callback.message.message_id
            )

        return await callback.message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
caption="""üíº <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É RUB —Å–¥–µ–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 100.5""",

reply_markup=welcome_button.wallet_inlkey,
parse_mode='HTML'
)

    if user_now.wallet and user_now.card == 'TON':

        await state.set_state(ReceiptReg.price)

        await bot.delete_message(
            chat_id=callback.message.chat.id, 
            message_id=callback.message.message_id
            )

        return await callback.message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
caption="""üíº <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É TON —Å–¥–µ–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 100.5""",

reply_markup=welcome_button.wallet_inlkey,
parse_mode='HTML'
)

    await bot.delete_message(
        chat_id=callback.message.chat.id, 
        message_id=callback.message.message_id
        )

    return await callback.message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ', caption='–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫!', reply_markup=receipt_button.create_wallet)



@router.message(ReceiptReg.price)
async def cmd_set_price(
    message: Message,
    state: FSMContext
) -> str:
    try:
        new_sum = int(message.text)

        await state.update_data(
            price = message.text
        )

        await state.set_state(ReceiptReg.tovar)

        return await message.answer(
"""üìù <b>–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ:</b>

–ü—Ä–∏–º–µ—Ä: 10 –ö–µ–ø–æ–∫ –∏ –ü–µ–ø–µ...""",

reply_markup=welcome_button.wallet_inlkey,
parse_mode='HTML'
)
    except Exception as e:
        return await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')



@router.message(ReceiptReg.tovar)
async def cmd_set_tovar(
    message: Message,
    state: FSMContext,
    session: AsyncSession
) -> str:
    
    await state.update_data(
        tovar = message.text
    )

    user = UsersRequests(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        session=session
    )

    this_user = await user.set_user()

    data = await state.get_data()

    id_receipt = uniq_generation()

    receipt = ReceiptsRequests(
        id_receipt=id_receipt,
        tovar=data["tovar"],
        price=data["price"],
        user_id=this_user.id,
        session=session
    )

    new_created_receipt = await receipt.create_receipt()

    await state.clear()

    if this_user.card == 'RU':

        return await message.answer(
f"""
‚úÖ <b>–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>

üí∞ <b>–°—É–º–º–∞:</b> {new_created_receipt.price} RUB
üìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {new_created_receipt.tovar}
üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b> https://t.me/{app_settings.BOT_NAME}?start={id_receipt}
""",

reply_markup=receipt_button.inlkey_receipt,
parse_mode="HTML"
)

    if this_user.card == 'TON':

        return await message.answer(
f"""
‚úÖ <b>–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>

üí∞ <b>–°—É–º–º–∞:</b> {new_created_receipt.price} TON
üìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {new_created_receipt.tovar}
üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b> https://t.me/{app_settings.BOT_NAME}?start={id_receipt}
""",

reply_markup=receipt_button.inlkey_receipt,
parse_mode="HTML"
)




@router.callback_query(F.data == "Cancel_the_deal")
async def cmd_cancle_the_deal(
    callback: CallbackQuery,
    session: AsyncSession
) -> str:

    await callback.answer('Cancel_the_deal')

    user_res = UsersRequests(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        session=session
    )

    user = await user_res.get_user()

    if user:

        receipt = ReceiptsRequests(
            user_id=user.id,
            session=session
        )

        this_receipt = await receipt.get_receipt_by_user_id()

        if this_receipt:

            if this_receipt.buyer:

                await bot.send_message(
                    chat_id=this_receipt.buyer,
                    text=f'–°–¥–µ–ª–∫–∞ #{this_receipt.id_receipt} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º @{this_receipt.user.username}!'
                    )

                await bot.send_photo(
                    photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
                    chat_id=this_receipt.buyer,
                    caption="""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç</b>

üíº <b>–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!</b>
–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.

üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏

üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>
–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ‚Äî https://telegra.ph/OTC-06-29

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:""",

reply_markup=welcome_button.inlkey,
parse_mode='HTML'
)

                await callback.message.answer(f'–°–¥–µ–ª–∫–∞ #{this_receipt.id_receipt} –æ—Ç–º–µ–Ω–µ–Ω–∞!')

                await callback.message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
caption="""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç</b>

üíº <b>–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!</b>
–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.

üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏

üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>
–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ‚Äî https://telegra.ph/OTC-06-29

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:""",
reply_markup=welcome_button.inlkey,
parse_mode='HTML'
)

                del_user = await receipt.delete_receipt(id_receipt=this_receipt.id_receipt)

                return

        return await callback.message.answer('‚ùå –î–∞–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!')