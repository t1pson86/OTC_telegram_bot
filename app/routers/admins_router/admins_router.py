from core.configuration.settings import app_settings

from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from sqlalchemy.ext.asyncio import AsyncSession

from requests.users_requests.users import UsersRequests
from requests.receipts_requests.receipts import ReceiptsRequests
from keyboards.receipt_keyboard.receipt_keyboard import receipt_button
from keyboards.main_keyboard.main_keyboard import welcome_button

router = Router()


bot = Bot(token=app_settings.TOKEN)


@router.message(Command('set_admin'))
async def cmd_create_new_admin(
    message: Message,
    session: AsyncSession
) -> str | None:

    user = UsersRequests(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        session=session
    )

    this_user = await user.set_user()

    if this_user.status == 'BigBoss':
        
        list_id = message.text.split()

        try:
            i = int(list_id[1])

            user_id = int(list_id[1])
            if this_user.telegram_id == user_id:
                return await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')

            now_user = await user.get_user_by_tgId(telegram_id=user_id)

            if now_user:

                if now_user.status == 'elevated':
                    return await message.answer('‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!')

                updt_user = await user.set_user_status(user_id=now_user.id)

                await bot.send_message(
                    chat_id=user_id,
                    text='üéâ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /buy <–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É(–º–µ–º–æ)>'
                )

                return await message.answer(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
            
            return await message.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')

        except Exception as e:
            return await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')
    
    return




@router.message(Command('kick_admin'))
async def cmd_kick_admin(
    message: Message,
    session: AsyncSession
) -> str | None:
    
    user = UsersRequests(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        session=session
    )

    this_user = await user.set_user()

    if this_user.status == 'BigBoss':

        list_id = message.text.split()

        try:

            i = int(list_id[1])

            user_id = int(list_id[1])
            if this_user.telegram_id == user_id:
                return await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')  
            
            now_user = await user.get_user_by_tgId(telegram_id=user_id)

            if now_user:

                if now_user.status == 'elevated':

                    updt_user = await user.del_user_status(user_id=now_user.id)

                    return await message.answer(f'‚úÖ –í—ã —É–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –ø–æ–∑–∏—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')

            return await message.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        
        except Exception as e:
            return await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')
    
    return



@router.message(Command('buy'))
async def cmd_buy(
    message: Message,
    session: AsyncSession
) -> str | None:
    
    user = UsersRequests(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        session=session
    )

    this_user = await user.set_user()

    if this_user.status == 'elevated' or this_user.status == 'BigBoss':

        list_id = message.text.split()


        try:
            user_id = list_id[1]


            receipt = ReceiptsRequests(
                id_receipt=user_id,
                session=session
            )

            this_receipt = await receipt.get_receipt()

            if this_receipt:
                

                await bot.send_photo(
                    chat_id=this_receipt.user.telegram_id,
                    photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
                    caption=f"""
‚úÖ  –ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{message.from_user.username} –æ–ø–ª–∞—Ç–∏–ª —Å–¥–µ–ª–∫—É, –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –±–æ—Ç—É @TraderOTCElf ( –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ).""",
                    reply_markup=receipt_button.yes_receipt
)
                
                del_rec = await receipt.delete_receipt(user_id)

                await message.answer(f'‚úÖ –§–µ–π–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {this_receipt.user.telegram_id}')

                return await message.answer_photo(photo='AgACAgEAAxkBAAICQWhnyjBbWnJemRLd15P-Llv4eRxqAALUrjEbdlpBR4tKeV52AiIkAQADAgADeAADNgQ',
caption="""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç</b>

üíº <b>–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!</b>
–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.

üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏

üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>
–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ‚Äî https://telegra.ph/OTC-06-29

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:""",
reply_markup=welcome_button.inlkey,
parse_mode='HTML'
)
            
            return await message.answer('‚ùå –î–∞–Ω–Ω—ã–π —á–µ–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!')

        except Exception as e:
            return await message.answer('‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')
        

    return



@router.callback_query(F.data=='confirm')
async def cmd_confirm(
    callback: CallbackQuery
) -> str:
    
    await callback.answer('confirm')

    return await callback.message.answer("""
<b>‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞!</b>

–ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
""", parse_mode='HTML')
